{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/home/files/javascript/react/react-native/remider/app/components/body/Body.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport AsyncStorage from '@react-native-community/async-storage';\nimport { connect } from 'react-redux';\nimport { CheckBox, ButtonGroup } from 'react-native-elements';\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { Colors } from \"react-native/Libraries/NewAppScreen\";\nimport Icon from \"@expo/vector-icons/FontAwesome\";\nimport BlocksItem from \"./layouts/blocksItem/BlocksItem\";\n\nvar Body = function (_Component) {\n  _inherits(Body, _Component);\n\n  var _super = _createSuper(Body);\n\n  function Body(props) {\n    var _this;\n\n    _classCallCheck(this, Body);\n\n    _this = _super.call(this, props);\n\n    _this.getData = function _callee() {\n      var todo;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem('todoNante'));\n\n            case 2:\n              todo = _context.sent;\n\n              if (todo !== null) {\n                _this.props.initData(JSON.parse(todo));\n              }\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.state = {\n      checked: true,\n      selectedIndex: 0\n    };\n    return _this;\n  }\n\n  _createClass(Body, [{\n    key: \"OnCheck\",\n    value: function OnCheck(id) {\n      this.props.toggleChech(id);\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.getData();\n    }\n  }, {\n    key: \"sortByDate\",\n    value: function sortByDate() {\n      return this.props.tasks.dataTasks.sort(function (a, b) {\n        return new Date(a.createAt) - new Date(b.createAt);\n      });\n    }\n  }, {\n    key: \"updateIndex\",\n    value: function updateIndex(selectedIndex) {\n      this.setState({\n        selectedIndex: selectedIndex\n      });\n      this.filterData();\n    }\n  }, {\n    key: \"filterData\",\n    value: function filterData() {\n      var response = [];\n      var stock = this.props.tasks.dataTasks;\n\n      switch (this.state.selectedIndex) {\n        case 0:\n          return stock;\n\n        case 1:\n          return stock.filter(function (e) {\n            return e.finishTasks === true;\n          });\n\n        case 2:\n          return stock.filter(function (e) {\n            return e.finishTasks === false;\n          });\n\n        default:\n          return stock;\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      this.sortByDate();\n\n      var component1 = function component1() {\n        return React.createElement(View, {\n          style: {\n            flexDirection: 'row'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 13\n          }\n        }, React.createElement(Icon, {\n          name: \"tasks\",\n          size: 20,\n          color: _this2.state.selectedIndex === 0 ? 'white' : '#555555',\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 17\n          }\n        }), React.createElement(Text, {\n          style: {\n            color: _this2.state.selectedIndex === 0 ? 'white' : '#555555'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 13\n          }\n        }, \" \", \"Touts\"));\n      };\n\n      var component2 = function component2() {\n        return React.createElement(View, {\n          style: {\n            flexDirection: 'row'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 13\n          }\n        }, React.createElement(Icon, {\n          name: \"check\",\n          size: 20,\n          type: \"entypo\",\n          color: _this2.state.selectedIndex === 1 ? 'white' : '#555555',\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 17\n          }\n        }), React.createElement(Text, {\n          style: {\n            color: _this2.state.selectedIndex === 1 ? 'white' : '#555555'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 13\n          }\n        }, \" \", \"Finish\"));\n      };\n\n      var component3 = function component3() {\n        return React.createElement(View, {\n          style: {\n            flexDirection: 'row'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 13\n          }\n        }, React.createElement(Icon, {\n          name: \"clock-o\",\n          size: 20,\n          type: \"entypo\",\n          color: _this2.state.selectedIndex === 2 ? 'white' : '#555555',\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 17\n          }\n        }), React.createElement(Text, {\n          style: {\n            color: _this2.state.selectedIndex === 2 ? 'white' : '#555555'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 13\n          }\n        }, \" \", \"En cours\"));\n      };\n\n      var buttons = [{\n        element: component1\n      }, {\n        element: component2\n      }, {\n        element: component3\n      }];\n      return React.createElement(View, {\n        style: {\n          marginTop: 30\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 13\n        }\n      }, React.createElement(Text, {\n        style: {\n          textAlign: 'center',\n          fontWeight: 'bold',\n          fontSize: 30\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 17\n        }\n      }, \"votre tache\"), React.createElement(View, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 17\n        }\n      }, React.createElement(ButtonGroup, {\n        onPress: this.updateIndex.bind(this),\n        selectedIndex: this.state.selectedIndex,\n        buttons: buttons,\n        containerStyle: {\n          height: 40\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 21\n        }\n      })), React.createElement(View, {\n        style: styles.root,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 17\n        }\n      }), React.createElement(ScrollView, {\n        contentInsetAdjustmentBehavior: \"automatic\",\n        style: styles.scrollView,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 17\n        }\n      }, this.filterData().map(function (e) {\n        return React.createElement(BlocksItem, {\n          key: e.idTasks,\n          data: e,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 36\n          }\n        });\n      })));\n    }\n  }]);\n\n  return Body;\n}(Component);\n\nvar styles = StyleSheet.create({\n  root: {\n    backgroundColor: 'white',\n    flexDirection: 'row',\n    marginLeft: 20,\n    paddingRight: 10\n  },\n  scrollView: {\n    padding: 5,\n    marginBottom: 35\n  }\n});\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    tasks: state.Tasks\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    toggleChech: function toggleChech(id) {\n      dispatch({\n        type: 'TOGGLE_CHECK',\n        id: id\n      });\n    },\n    initData: function initData(data) {\n      dispatch({\n        type: 'INIT_DATA',\n        data: data\n      });\n    },\n    removeTask: function removeTask() {\n      dispatch({\n        type: 'REMOVE_TASKS'\n      });\n    },\n    changeShowPut: function changeShowPut(data) {\n      dispatch({\n        type: 'CHANGE_SHOW_PUT',\n        data: data\n      });\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Body);","map":{"version":3,"sources":["/home/files/javascript/react/react-native/remider/app/components/body/Body.js"],"names":["React","Component","AsyncStorage","connect","CheckBox","ButtonGroup","Colors","Icon","BlocksItem","Body","props","getData","getItem","todo","initData","JSON","parse","state","checked","selectedIndex","id","toggleChech","tasks","dataTasks","sort","a","b","Date","createAt","setState","filterData","response","stock","filter","e","finishTasks","sortByDate","component1","flexDirection","color","component2","component3","buttons","element","marginTop","textAlign","fontWeight","fontSize","updateIndex","bind","height","styles","root","scrollView","map","idTasks","StyleSheet","create","backgroundColor","marginLeft","paddingRight","padding","marginBottom","mapStateToProps","Tasks","mapDispatchToProps","dispatch","type","data","removeTask","changeShowPut"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\nimport AsyncStorage from '@react-native-community/async-storage'\nimport { connect } from 'react-redux'\nimport { CheckBox, ButtonGroup } from 'react-native-elements'\nimport {ScrollView, StyleSheet, View, Alert, Text} from 'react-native'\nimport {Colors} from \"react-native/Libraries/NewAppScreen\";\nimport Icon from 'react-native-vector-icons/FontAwesome'\nimport BlocksItem from './layouts/blocksItem/BlocksItem'\n\nclass Body extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            checked: true,\n            selectedIndex: 0\n        }\n    }\n\n    OnCheck (id) {\n        this.props.toggleChech(id)\n    }\n\n    componentDidMount () {\n        this.getData()\n    }\n\n    getData = async () => {\n        var todo = await AsyncStorage.getItem('todoNante')\n        if(todo !== null){\n            this.props.initData(JSON.parse(todo))\n        }\n    }\n\n    sortByDate () {\n        return this.props.tasks.dataTasks.sort((a, b) => {\n            return new Date(a.createAt) - new Date(b.createAt);\n        });\n    }\n\n    updateIndex (selectedIndex) {\n        this.setState({selectedIndex})\n        this.filterData()\n    }\n\n    filterData () {\n        var response = []\n        var stock = this.props.tasks.dataTasks\n        switch (this.state.selectedIndex) {\n            case 0:\n                return stock\n            case 1:\n                return stock.filter(e=>{\n                    return e.finishTasks === true\n                })\n            case 2:\n                return stock.filter(e=>{\n                    return e.finishTasks === false\n                })\n            default:\n                return stock\n        }\n    }\n\n\n    render() {\n        this.sortByDate()\n        // const buttons = ['Tous', 'finis', 'en cours']\n        const component1 = () => \n            <View style={{ flexDirection: 'row' }}>\n                <Icon\n                    name='tasks'\n                    size={20}\n                    color={ this.state.selectedIndex === 0 ? 'white': '#555555' }\n                />\n            <Text style={{ color: this.state.selectedIndex === 0 ? 'white': '#555555' }}>\n                {\" \"}Touts\n            </Text>\n        </View>\n        const component2 = () =>\n            <View style={{ flexDirection: 'row' }}>\n                <Icon\n                    name='check'\n                    size={20}\n                    type='entypo'\n                    color={ this.state.selectedIndex === 1 ? 'white': '#555555' }\n                />\n            <Text style={{ color: this.state.selectedIndex === 1 ? 'white': '#555555' }}>\n                {\" \"}Finish\n            </Text>\n        </View>\n        const component3 = () =>\n            <View style={{ flexDirection: 'row' }}>\n                <Icon\n                    name='clock-o'\n                    size={20}\n                    type='entypo'\n\n                    color={ this.state.selectedIndex === 2 ? 'white': '#555555' }\n                />\n            <Text style={{ color: this.state.selectedIndex === 2 ? 'white': '#555555' }}>\n                {\" \"}En cours\n            </Text>\n        </View>\n        const buttons = [{ element: component1 }, { element: component2 }, { element: component3 }]\n        return (\n            <View style={{ marginTop: 30 }}>\n                <Text style={{ textAlign:'center', fontWeight:'bold', fontSize: 30 }}>votre tache</Text>\n                <View>\n                    <ButtonGroup\n                        onPress={this.updateIndex.bind(this)}\n                        selectedIndex={this.state.selectedIndex}\n                        buttons={buttons}\n                        containerStyle={{height: 40}}\n                    />\n                </View>\n                <View style={styles.root}>\n\n\n                </View>\n\n                <ScrollView\n                    contentInsetAdjustmentBehavior=\"automatic\"\n                    style={styles.scrollView}\n                >\n                    {\n                        this.filterData().map((e)=>{\n                            return <BlocksItem  key={e.idTasks} data={e}/>\n                        })\n                    }\n                </ScrollView>\n            </View>\n        )\n    }\n}\n\nconst styles = StyleSheet.create({\n    root: {\n        backgroundColor: 'white',\n        flexDirection:'row',\n        // justifyContent: 'flex-end',\n        marginLeft: 20,\n        paddingRight: 10\n    },\n    scrollView: {\n        //backgroundColor: Colors.lighter,\n        padding: 5,\n        marginBottom: 35\n    }\n});\n\nconst mapStateToProps = state => {\n    return {  tasks: state.Tasks }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        toggleChech: (id) => {\n            dispatch({ type: 'TOGGLE_CHECK', id })\n        },\n        initData: (data) => {\n            dispatch({ type: 'INIT_DATA', data })\n        },\n        removeTask: () => {\n            dispatch({ type: 'REMOVE_TASKS'})\n        },\n        changeShowPut: (data) => {\n            dispatch({ type: 'CHANGE_SHOW_PUT', data})\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Body)\n"]},"metadata":{},"sourceType":"module"}